---
pagination:
  data: stories
  size: 250
  alias: story
eleventyExcludeFromCollections: true
permalink: /admin/orto/index.html
---
{% extends 'layouts/admin.njk' %}

{% block content %}
	<style>
		* {
			box-sizing: border-box;
		}

		#myInput {
			background-image: url('https://www.w3schools.com/css/searchicon.png');
			background-position: 10px 12px;
			background-repeat: no-repeat;
			width: 100%;
			font-size: 16px;
			padding: 12px 20px 12px 40px;
			border: 1px solid #ddd;
			margin-bottom: 12px;
		}

		#myUL {
			list-style-type: none;
			padding: 0;
			margin: 0;
		}

		#myUL li a {
			border: 1px solid #ddd;
			margin-top: -1px; /* Prevent double borders */
			background-color: #f6f6f6;
			padding: 12px;
			text-decoration: none;
			font-size: 18px;
			color: black;
			display: block
		}

		#myUL li a:hover:not(.header) {
			background-color: #eee;
		}

		#threshold {
			width: 100%;
		}

		textarea {
			width: 100%;
			height: 500px;
			border: 1px solid #ccc;
		}
	</style>
	<main>
		<header>
			<h1>vokabularju</h1>
		</header>
		<p>B'kollox ippubblikajna kliem: {{ stories[0].cumulativeWordcount }}, xogħlijiet: {{ stories.length }}.
		<br/>
		<form>
			<textarea type="text" id="myInput" autocomplete="off"></textarea>
			<input type="button" onclick="myFunction()" value="Iċċekkja" />
		</form>
		{# <input type="range" id="threshold" name="points" min="1" onchange="changeRange()" max="1000"> #}
		{# <h5 id="showThreshold"></h5> #}
		<section>
			{# <p>{{ stories[0].vocabulary.length | slugify }}</p> #}
			<script>
				const vocabulary = [
					{% for word in stories[0].vocabulary %}"{{ word.word }}",{% endfor %}
				];
				document.write('>>>', vocabulary.length);
			</script>
		</section>
	</main>
	<script>
	let threshold = 1000;
	let filter;

	function hideShow() {
		var input, ul, li, a, i, txtValue;
		ul = document.getElementById("myUL");
		li = ul.getElementsByTagName("li");
		for (i = 0; i < li.length; i++) {
			// a = li[i].getElementsByTagName("a")[0];
			// txtValue = a.textContent || a.innerText;
			txtValue = li[i].textContent || li[i].innerText;
			if (txtValue.toUpperCase().indexOf(filter) > -1) {
				li[i].style.display = "";
			} else {
				li[i].style.display = "none";
			}
		}
	}

	function changeRange() {
		var input, output;
		input = document.getElementById("threshold");
		output = document.getElementById("showThreshold");
		threshold = input.value;
		output.textContent = threshold;
		hideShow();
	}

	function myFunction() {
		var input, ul, li, a, i, txtValue;
		input = document.getElementById("myInput");
		filter = input.value.toUpperCase();
		if (filter === "") return;
		hideShow();
	}

	// Also used back-end
	const splitText = (text, aggressively = false) => {
		let cleanedText = stripTags(text).toLowerCase()
			.replace(/\b\d+\b/g, " ")
			.replace(/b\’/g, "b’ ")
			.replace(/[\—]/g, " ")
			.replace(/[\[\]\.,\/#!\$\€%\^&\*;:{}=_‘`“”~()]/g, "")
			.replace(/\s+/g, " ");
		if (aggressively) {
			cleanedText = cleanedText.replace(/\b(b|f)(\’|\')/gi, "")
				.replace(/\bi?(.)-/gi, "")
				.replace(/\b(bi?|bħa|fi?|ġo|għa|mi|sa|ta)l?.?-?(.)-/gi, "")
				.replace(/\b\’/gi, "")
		}
		// .replace(/f\’/g, "f’ ")
		// .replace(/[\-]/g, "- ")
		// FIXME: avoid doing this twice, maybe concatenate arrays and split at the end
		return cleanedText.split(/\s+/);
	}

	const getWordFrequency = (text) => {
		const wordsArray = splitText(text, true);
		wordcount = wordsArray.length;
		cumulativeWordcount += wordcount;
		const wordFrequency = {};
		wordsArray.forEach((word) => {
			wordFrequency[word] = (wordFrequency[word] || 0) + 1;
		});
		const result = Object.entries(wordFrequency).map(([word, frequency]) => ({ word, frequency }));
		const filteredResult = result; // .filter((word) => word.frequency === 1);
		filteredResult.sort((a, b) => {
			if (a.frequency === b.frequency) {
				return a.word.localeCompare(b.word);
			}
			return a.frequency - b.frequency;
		});
		return filteredResult;
	};
</script>
{% endblock %}
